use core::mem::MaybeUninit;
use std::ptr;

use crate::unwrap_debug;

pub trait PushIf<T> {
    fn push_if(&mut self, value: T, cond: bool);
}

#[repr(C)]
pub struct CInlineVec<T, const CAPACITY: usize> {
    data: [MaybeUninit<T>; CAPACITY],
    count: u32,
}

impl<T, const CAPACITY: usize> CInlineVec<T, CAPACITY> {
    pub fn push(&mut self, value: T) {
        self.set_top_element(value);
        self.count += 1;
    }

    fn set_top_element(&mut self, value: T) {
        unsafe {
            *unwrap_debug!(self.data.get_mut(self.count as usize)) = MaybeUninit::new(value);
        }
    }

    pub fn clear(&mut self) {
        for i in 0..self.count as usize {
            unsafe {
                unwrap_debug!(self.data.get_mut(i)).assume_init_drop();
            }
        }

        self.count = 0;
    }

    pub fn is_empty(&self) -> bool {
        self.count == 0
    }

    pub fn element_count(&self) -> u32 {
        self.count
    }

    /// # Safety
    /// The vec must not be empty before calling this function.
    pub fn pop(&mut self) -> T {
        self.count -= 1;
        unsafe { unwrap_debug!(self.data.get(self.count as usize)).assume_init_read() }
    }

    pub fn get_slice(&self) -> &[T] {
        // SAFETY: count shouldn't ever be able to be incremented past LEN, and the
        // contents should be initialized
        unsafe {
            // less bad with MaybeUninit::slice_assume_init_ref, unfortunately it's nightly only
            &*(unwrap_debug!(self.data.get(0..self.count as usize)) as *const _ as *const [T])
        }
    }

    pub fn get_slice_mut(&mut self) -> &mut [T] {
        // SAFETY: count shouldn't ever be able to be incremented past LEN, and the
        // contents should be initialized
        unsafe {
            // less bad with MaybeUninit::slice_assume_init_mut, unfortunately it's nightly only
            &mut *(unwrap_debug!(self.data.get_mut(0..self.count as usize)) as *mut _ as *mut [T])
        }
    }
}

impl<T, const CAPACITY: usize> Default for CInlineVec<T, CAPACITY> {
    fn default() -> Self {
        Self {
            data: unsafe { MaybeUninit::<[MaybeUninit<T>; CAPACITY]>::uninit().assume_init() },
            count: 0,
        }
    }
}

impl<T: Copy, const CAPACITY: usize> Clone for CInlineVec<T, CAPACITY> {
    fn clone(&self) -> Self {
        *self
    }
}

impl<T: Copy, const CAPACITY: usize> Copy for CInlineVec<T, CAPACITY> {}

impl<T, const CAPACITY: usize> PushIf<T> for CInlineVec<T, CAPACITY> {
    fn push_if(&mut self, value: T, cond: bool) {
        self.set_top_element(value);
        self.count += cond as u32;
    }
}

impl<T> PushIf<T> for Vec<T> {
    fn push_if(&mut self, value: T, cond: bool) {
        self.reserve(1);

        let len = self.len();

        unsafe {
            let end = self.as_mut_ptr().add(len);
            ptr::write(end, value);

            self.set_len(len + cond as usize);
        }
    }
}
