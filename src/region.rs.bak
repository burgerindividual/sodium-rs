use core_simd::simd::prelude::*;

use crate::collections::{CInlineVec, PushIf};
use crate::graph::context::GraphSearchContext;
use crate::graph::coords::LocalTileCoords;
use crate::math::*;

pub const SECTIONS_IN_REGION: usize = 8 * 4 * 8;
pub const REGION_COORD_SHIFT: u8x3 = Simd::from_array([3, 2, 3]);
pub const REGION_MASK: u8x3 = Simd::from_array([0b11111000, 0b11111100, 0b11111000]);

#[derive(Clone, Copy, Debug)]
#[repr(transparent)]
pub struct LocalRegionIndex(u16);

impl LocalRegionIndex {
    const X_MASK_SINGLE: u16 = 0b11111000;
    const Y_MASK_SINGLE: u16 = 0b11111100;
    const Z_MASK_SINGLE: u16 = 0b11111000;

    const X_MASK_SHIFT_LEFT: u16 = 8;
    const Y_MASK_SHIFT_LEFT: u16 = 3;
    const Z_MASK_SHIFT_RIGHT: u16 = 3;

    pub fn from_local_section(local_section_coord: LocalTileCoords<0>) -> Self {
        Self(
            (((local_section_coord.0.cast::<u16>()
                & u16x3::from_array([
                    Self::X_MASK_SINGLE,
                    Self::Y_MASK_SINGLE,
                    Self::Z_MASK_SINGLE,
                ]))
                << u16x3::from_array([Self::X_MASK_SHIFT_LEFT, Self::Y_MASK_SHIFT_LEFT, 0]))
                >> u16x3::from_array([0, 0, Self::Z_MASK_SHIFT_RIGHT]))
            .reduce_or(),
        )
    }
}

#[derive(Clone, Copy)]
#[repr(transparent)]
pub struct RegionSectionIndex(u8);

impl RegionSectionIndex {
    const X_MASK_SINGLE: u8 = 0b00000111;
    const Y_MASK_SINGLE: u8 = 0b00000011;
    const Z_MASK_SINGLE: u8 = 0b00000111;

    const X_MASK_SHIFT: u8 = 5;
    const Y_MASK_SHIFT: u8 = 0;
    const Z_MASK_SHIFT: u8 = 2;

    pub fn from_local_section(local_section_coord: LocalTileCoords<0>) -> Self {
        Self(
            ((local_section_coord.0
                & u8x3::from_array([
                    Self::X_MASK_SINGLE,
                    Self::Y_MASK_SINGLE,
                    Self::Z_MASK_SINGLE,
                ]))
                << u8x3::from_array([Self::X_MASK_SHIFT, Self::Y_MASK_SHIFT, Self::Z_MASK_SHIFT]))
            .reduce_or(),
        )
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct RegionRenderList {
    sections_present: [u64; 4],
}

impl RegionRenderList {
    pub const UNDEFINED_REGION_COORDS: i32x3 = Simd::from_array([i32::MIN; 3]);

    pub fn add_section(&mut self, local_section_coord: LocalTileCoords<0>) {
        // this method previously had stuff to check flags in it. would this be useful to us?
        let region_section_index = RegionSectionIndex::from_local_section(local_section_coord);
        // // only add to each section list if the flag is satisfied
        // self.sections_with_geometry.push_conditionally(
        //     region_section_index,
        //     section_flags.contains(SectionFlag::HasBlockGeometry),
        // );
        // self.sections_with_sprites.push_conditionally(
        //     region_section_index,
        //     section_flags.contains(SectionFlag::HasAnimatedSprites),
        // );
        // self.sections_with_block_entities.push_conditionally(
        //     region_section_index,
        //     section_flags.contains(SectionFlag::HasBlockEntities),
        // );
        self.section_indices.push(region_section_index);
    }

    pub fn is_empty(&self) -> bool {
        // this is safe because we know that the sum of the element counts can never
        // overflow, due to the maximum sizes of the vectors
        // self.sections_with_geometry.element_count()
        //     + self.sections_with_sprites.element_count()
        //     + self.sections_with_block_entities.element_count()
        //     == 0
        self.section_indices.is_empty()
    }

    pub fn clear(&mut self) {
        self.region_coords = Self::UNDEFINED_REGION_COORDS;
        self.section_indices.clear();
        // self.sections_with_geometry.clear();
        // self.sections_with_sprites.clear();
        // self.sections_with_block_entities.clear();
    }
}
